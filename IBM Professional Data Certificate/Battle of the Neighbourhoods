{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Applied Data Science Capstone Project - Battle of the Neighbourhoods</h2>\n",
    "\n",
    "<p>For this 'Battle of the Neighbourhoods' Capstone Project, I will be looking at the London boroughs which\n",
    "make up East London. A requirement of the project is to use the Foursquare Places API to produce place data for\n",
    "a neighbourhood and comparing neighbourhoods with this information. I will be looking at parks in these boroughs.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#install pandas v0.25 if current version is lower\n",
    "#!pip install pandas==0.25 --force-reinstall --user \n",
    "import pandas as pd\n",
    "import requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Location</th>\n",
       "      <th>London borough</th>\n",
       "      <th>Post town</th>\n",
       "      <th>Postcode district</th>\n",
       "      <th>Dial code</th>\n",
       "      <th>OS grid ref</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abbey Wood</td>\n",
       "      <td>Bexley, Greenwich [2]</td>\n",
       "      <td>LONDON</td>\n",
       "      <td>SE2</td>\n",
       "      <td>020</td>\n",
       "      <td>TQ465785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Acton</td>\n",
       "      <td>Ealing, Hammersmith and Fulham[3]</td>\n",
       "      <td>LONDON</td>\n",
       "      <td>W3, W4</td>\n",
       "      <td>020</td>\n",
       "      <td>TQ205805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Addington</td>\n",
       "      <td>Croydon[3]</td>\n",
       "      <td>CROYDON</td>\n",
       "      <td>CR0</td>\n",
       "      <td>020</td>\n",
       "      <td>TQ375645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Addiscombe</td>\n",
       "      <td>Croydon[3]</td>\n",
       "      <td>CROYDON</td>\n",
       "      <td>CR0</td>\n",
       "      <td>020</td>\n",
       "      <td>TQ345665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albany Park</td>\n",
       "      <td>Bexley</td>\n",
       "      <td>BEXLEY, SIDCUP</td>\n",
       "      <td>DA5, DA14</td>\n",
       "      <td>020</td>\n",
       "      <td>TQ478728</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Location                     London borough       Post town  \\\n",
       "0   Abbey Wood              Bexley, Greenwich [2]          LONDON   \n",
       "1        Acton  Ealing, Hammersmith and Fulham[3]          LONDON   \n",
       "2    Addington                         Croydon[3]         CROYDON   \n",
       "3   Addiscombe                         Croydon[3]         CROYDON   \n",
       "4  Albany Park                             Bexley  BEXLEY, SIDCUP   \n",
       "\n",
       "  Postcode district Dial code OS grid ref  \n",
       "0               SE2       020    TQ465785  \n",
       "1            W3, W4       020    TQ205805  \n",
       "2               CR0       020    TQ375645  \n",
       "3               CR0       020    TQ345665  \n",
       "4         DA5, DA14       020    TQ478728  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get list of areas in London from this Wikipedia page and produce a dataframe with the data\n",
    "url = 'https://en.wikipedia.org/wiki/List_of_areas_of_London'\n",
    "df = (pd.read_html(url))[1]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Drop unneeded columns\n",
    "df.drop(df.columns[[2,4]], axis=1, inplace=True)\n",
    "#Some column names are formatted incorrectly so correct these\n",
    "df.rename(columns={'London\\xa0borough': 'Borough', 'Postcode\\xa0district': 'Postcode'}, inplace=True)\n",
    "#Remove reference subscript \n",
    "df['Borough'] = df['Borough'].str.split('[').str[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Keep only boroughs with mean house prices (2017) less than Â£500k\n",
    "suitable = ['Barking and Dagenham', 'Bexley', 'Croydon', 'Ealing', \n",
    "            'Enfield', 'Greenwich', 'Havering', 'Hillingdon', \n",
    "           'Lewisham', 'Newham', 'Redbridge', 'Sutton', 'Waltham Forest']\n",
    "s = set(suitable)\n",
    "mask = df['Borough'].apply(lambda x: set(x.split(', ')).isdisjoint(s))\n",
    "df = df[~mask]\n",
    "df.dropna(subset=['OS grid ref'], inplace=True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: OSGridConverter in ./miniconda3/lib/python3.7/site-packages (0.1.3)\r\n"
     ]
    }
   ],
   "source": [
    "#Install OSGridConverter for generating co-ordinates for places, using their OS grid reference.\n",
    "!pip install OSGridConverter\n",
    "#Latitude and Longitude for each place is stored in new columns.\n",
    "from OSGridConverter import grid2latlong\n",
    "df = df.assign(Latitude = '', Longitude = '')\n",
    "for i in range(len(df)):\n",
    "    df['Latitude'].iloc[i] = grid2latlong(df['OS grid ref'].iloc[i]).latitude\n",
    "    df['Longitude'].iloc[i] = grid2latlong(df['OS grid ref'].iloc[i]).longitude"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Foursquare credentials imported. Hidden for pirvacy. Please enter your own if using. \n",
    "\n",
    "import json\n",
    "filename = 'documents/fsquarecredential.json'\n",
    "with open(filename) as f:\n",
    "    data = json.load(f)\n",
    "CLIENT_ID = data['credential']['CLIENT_ID'] #Foursquare )FS) ID\n",
    "CLIENT_SECRET = data['credential']['CLIENT_SECRET'] # FS Secret\n",
    "VERSION = data['credential']['VERSION'] # FS API version"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#A HTTPS request is made to the Foursquare Places API  to get each park within a 1km radius of the co-ordinates \n",
    "#corresponding to a place in the dataframe. The resulting JSON is queried to store park names in a new column for\n",
    "#each area. \n",
    "\n",
    "df = df.assign(Parks = '')\n",
    "search_query = 'park'\n",
    "radius = 1000\n",
    "LIMIT = 150\n",
    "\n",
    "for i in range(len(df)):\n",
    "    latitude = df['Latitude'].iloc[i]\n",
    "    longitude = df['Longitude'].iloc[i]\n",
    "    url = 'https://api.foursquare.com/v2/venues/search?client_id={}&client_secret={}&ll={},{}&v={}&query={}&radius={}&limit={}'.format(CLIENT_ID, CLIENT_SECRET, latitude, longitude, VERSION, search_query, radius, LIMIT)\n",
    "    results = requests.get(url).json()\n",
    "    for j in range(len(results['response']['venues'])):\n",
    "        try:\n",
    "            if results['response']['venues'][j]['categories'][0]['name'] == 'Park': \n",
    "                if df['Parks'].iloc[i] == '':\n",
    "                    df['Parks'].iloc[i] += results['response']['venues'][j]['name']\n",
    "                else:\n",
    "                    df['Parks'].iloc[i] += ', ' + results['response']['venues'][j]['name']\n",
    "        except: \n",
    "            results['response']['venues'][j]['categories'] == []\n",
    "            \n",
    "df.drop(['OS grid ref', 'Latitude', 'Longitude', 'Postcode'],axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Pandas explode feature is used to expand the dataframe so that location have unique rows for each borough they're in\n",
    "#and for each park in them.\n",
    "df.Borough = df.Borough.str.split(',\\s*')\n",
    "df = df.explode('Borough')\n",
    "df.Parks = df.Parks.str.split(',\\s*') \n",
    "df = df.explode('Parks') \n",
    "\n",
    "#Numbers of unique parks in a borough and in a place/location are tallied.\n",
    "a = df.groupby('Location').Parks.nunique()\n",
    "b = df.groupby('Borough').Parks.nunique()\n",
    "\n",
    "#A new dataframe is produced for the \n",
    "\n",
    "df2 = pd.DataFrame(data=b[0:], \n",
    "        index=b.keys())\n",
    "df2.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Top 10 locations by number of parks is plotted.\n",
    "import matplotlib.pyplot as plt\n",
    "top10 = a.sort_values(ascending=False)[:10].plot(kind='bar')\n",
    "plt.ylabel('Number of parks')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ks/miniconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n"
     ]
    }
   ],
   "source": [
    "#Population Density by borough generated and inserted into a new dataframe. \n",
    "\n",
    "url = 'https://en.wikipedia.org/wiki/List_of_London_boroughs'\n",
    "df3 = (pd.read_html(url))[0]\n",
    "df3['Borough'][0] = 'Barking and Dagenham'\n",
    "mask = df3['Borough'].apply(lambda x: set(x.split(', ')).isdisjoint(s))\n",
    "df3 = df3[~mask]\n",
    "df3.drop(['Inner', 'Status', 'Local authority', 'Political control', 'Headquarters', 'Co-ordinates', 'Nr. in map'],axis=1, inplace=True)\n",
    "df3['Population Density'] = df3[df3.columns[2]]/df3[df3.columns[1]]/10000\n",
    "df3.drop([df3.columns[1], df3.columns[2]], axis=1, inplace=True)\n",
    "df3['Borough'] = df3['Borough'].str.split('[').str[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Parks</th>\n",
       "      <th>Population Density</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Barking and Dagenham</td>\n",
       "      <td>10</td>\n",
       "      <td>1.395205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bexley</td>\n",
       "      <td>13</td>\n",
       "      <td>1.012348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Croydon</td>\n",
       "      <td>29</td>\n",
       "      <td>1.115690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ealing</td>\n",
       "      <td>24</td>\n",
       "      <td>1.597453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Enfield</td>\n",
       "      <td>22</td>\n",
       "      <td>1.009842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Havering</td>\n",
       "      <td>21</td>\n",
       "      <td>0.558431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Hillingdon</td>\n",
       "      <td>25</td>\n",
       "      <td>0.642055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Lewisham</td>\n",
       "      <td>37</td>\n",
       "      <td>2.108917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Newham</td>\n",
       "      <td>29</td>\n",
       "      <td>2.276302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Redbridge</td>\n",
       "      <td>13</td>\n",
       "      <td>1.323563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Sutton</td>\n",
       "      <td>17</td>\n",
       "      <td>1.157200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Waltham Forest</td>\n",
       "      <td>10</td>\n",
       "      <td>1.773162</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Borough  Parks  Population Density\n",
       "0   Barking and Dagenham     10            1.395205\n",
       "1                 Bexley     13            1.012348\n",
       "2                Croydon     29            1.115690\n",
       "3                 Ealing     24            1.597453\n",
       "4                Enfield     22            1.009842\n",
       "5               Havering     21            0.558431\n",
       "6             Hillingdon     25            0.642055\n",
       "7               Lewisham     37            2.108917\n",
       "8                 Newham     29            2.276302\n",
       "9              Redbridge     13            1.323563\n",
       "10                Sutton     17            1.157200\n",
       "11        Waltham Forest     10            1.773162"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#This information is merged to produce a new datafame showing the accumulated number of parks \n",
    "#within 1km of areas in the borough, asw ell as population density for a borough.\n",
    "\n",
    "merged_df = pd.merge(df2, df3, \n",
    "                     left_on = 'Borough', \n",
    "                     right_on = 'Borough', \n",
    "                     how='right')\n",
    "\n",
    "merged_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#This information is plot on a scatter plot\n",
    "\n",
    "boroughs = merged_df['Borough'].values.tolist()\n",
    "x_coords = merged_df['Parks'].values.tolist()\n",
    "y_coords = merged_df['Population Density'].values.tolist()\n",
    "\n",
    "for i,borough in enumerate(boroughs):\n",
    "    x = x_coords[i]\n",
    "    y = y_coords[i]\n",
    "    plt.scatter(x, y, marker='o', color='blue')\n",
    "    plt.text(x, y, borough, fontsize=9)\n",
    "    plt.xlabel('Number of Parks')\n",
    "    plt.ylabel('Population Density')\n",
    "plt.rcParams['figure.figsize'] = [10, 6]\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So what can be concluded from this data? The data seems to imply a positive correlation between number of parks and\n",
    "population density of a borough. The areas with the most parks are all based in the most population dense boroughs of Hackney and Tower Hamlets. \n",
    "\n",
    "A person or family wanting to move to a borough on the basis of it having lots of available green space, might look to Havering with it being not so dense in population and having 21 parks. \n",
    "The size of these parks has not been looked at, however. As a next step, estimating the total area of these parks would make sense. It needs to be investigated also whether the Foursquare Places API is accurately picking up all parks in an area. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
